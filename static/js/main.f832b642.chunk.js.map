{"version":3,"sources":["components/pdfTool/pdfSplit/PdfSplit.tsx","common/Select.tsx","components/pdfTool/pdfMerge/PdfMerge.tsx","common/DragAndDropList.tsx","breakpoints.ts","common/ButtonMenu.styled.tsx","common/ButtonMenu.tsx","App.tsx","reportWebVitals.ts","context/theme-context.tsx","components/layout/Header.tsx","components/pdfTool/PdfInterface.tsx","index.tsx","components/pdfTool/pdfSplit/PdfSplit.styled.ts","components/pdfTool/pdfMerge/PdfMerge.styled.ts"],"names":["pageOptions","text","value","PdfSplit","useState","pageName","setPageName","pageOption","setPageOption","file","setFile","fileName","setFileName","isUploading","setIsUploading","showNotification","setShowNotification","submitHandler","e","a","preventDefault","formData","FormData","append","JSON","stringify","split","headers","accept","axios","post","process","then","response","responseBuffer","Buffer","from","data","url","window","URL","createObjectURL","Blob","link","document","createElement","href","target","rel","setAttribute","replace","body","appendChild","click","catch","err","console","log","finally","onSubmit","variant","label","onChange","disabled","title","selectHandler","selectedValue","options","htmlFor","type","id","files","currentTarget","length","name","onClick","component","endIcon","loading","anchorOrigin","vertical","horizontal","open","autoHideDuration","onClose","_","reason","severity","sx","width","Select","toLowerCase","replaceAll","labelId","map","option","PdfMerge","setFiles","outputPdfName","setOutputPdfName","forEach","content","fileList","push","multiple","items","onDragging","sourceIndex","targetIndex","itemBeingDragged","splice","onDelete","indexToBeDeleted","CustomisedListItem","styled","ListItem","CustomisedCloseIcon","CloseIcon","DragAndDropList","onDragEnd","result","source","index","destination","undefined","droppableId","droppableProvided","ref","innerRef","droppableProps","item","draggableId","draggableProvided","draggableProps","dragHandleProps","placeholder","breakpoints","xs","sm","md","lg","xl","CustomisedCard","Card","ButtonMenu","clickHandler","Typography","List","display","Button","startIcon","icon","margin","clickParameter","App","navigate","useNavigate","tools","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ThemeContext","createContext","switchTheme","ThemeContextProvider","children","mode","setMode","theme","useMemo","createTheme","palette","Provider","prevMode","ThemeProvider","Header","themeContext","useContext","useTheme","Box","flexGrow","AppBar","position","Toolbar","IconButton","size","edge","color","mr","Menu","LightMode","DarkMode","PdfInterface","navigateToLink","functionalities","ReactDOM","render","StrictMode","height","bgcolor","path","element","getElementById","CustomisedInput","input","CustomisedFormControl","FormControl","Title"],"mappings":"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","file":"static/js/main.f832b642.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\nimport { Button, TextField, SelectChangeEvent, Snackbar, Alert, SnackbarCloseReason } from '@mui/material';\r\nimport LoadingButton from '@mui/lab/LoadingButton';\r\nimport { UploadFile, Send } from '@mui/icons-material';\r\nimport axios, { AxiosRequestConfig } from 'axios';\r\nimport { CustomisedInput, CustomisedFormControl, CustomisedCard, Title } from './PdfSplit.styled';\r\nimport Select from '../../../common/Select';\r\n\r\nconst pageOptions = [\r\n  {\r\n    text: 'No Page Split',\r\n    value: 'no-split',\r\n  },\r\n  {\r\n    text: 'Page Split (Horizontal)',\r\n    value: 'horizontal',\r\n  },\r\n  {\r\n    text: 'Page Split (Vertical)',\r\n    value: 'vertical',\r\n  },\r\n];\r\n\r\nconst PdfSplit = (): JSX.Element => {\r\n  const [pageName, setPageName] = useState('Page');\r\n  const [pageOption, setPageOption] = useState('no-split');\r\n  const [file, setFile] = useState<File | null>(null);\r\n  const [fileName, setFileName] = useState('Upload File');\r\n  const [isUploading, setIsUploading] = useState('initial');\r\n  const [showNotification, setShowNotification] = useState(false);\r\n\r\n  const setPageNameHandler = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n    setPageName(e.target.value);\r\n  };\r\n\r\n  const pageOptionSelectHandler = (e: SelectChangeEvent<string>): void => {\r\n    setPageOption(e.target.value);\r\n  };\r\n\r\n  const fileUploadHandler = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n    const files = e.currentTarget.files;\r\n    if (files && files.length) {\r\n      setFileName(files[0].name);\r\n      setFile(files[0]);\r\n    }\r\n  };\r\n\r\n  const submitHandler = async (e: React.FormEvent<HTMLFormElement>) => {\r\n    e.preventDefault();\r\n    setIsUploading('processing');\r\n    const formData = new FormData();\r\n    formData.append('file', file as Blob, fileName);\r\n    formData.append('pageName', pageName);\r\n    formData.append('pageOptions', JSON.stringify({ split: pageOption }));\r\n    const headers = {\r\n      headers: { 'content-type': 'multipart/form-data', accept: 'application/octet-stream' },\r\n    } as AxiosRequestConfig;\r\n    axios\r\n      .post(`${process.env.REACT_APP_BACKEND_URL}/pdf/split`, formData, headers)\r\n      .then((response) => {\r\n        const responseBuffer = Buffer.from(response.data, 'base64');\r\n\r\n        const url = window.URL.createObjectURL(new Blob([responseBuffer]));\r\n        const link = document.createElement('a');\r\n        link.href = url;\r\n        link.target = '_blank';\r\n        link.rel = 'noopener noreferrer';\r\n        link.setAttribute('download', fileName.replace('.pdf', '.zip'));\r\n        document.body.appendChild(link);\r\n        link.click();\r\n\r\n        setFile(null);\r\n        setFileName('Upload File');\r\n        setShowNotification(true);\r\n      })\r\n      .catch((err) => {\r\n        console.log(err);\r\n      })\r\n      .finally(() => {\r\n        setIsUploading('initial');\r\n      });\r\n  };\r\n\r\n  const clearUploadedFileHandler = (e: React.MouseEvent<HTMLInputElement>) => {\r\n    (e.target as HTMLInputElement).value = '';\r\n  };\r\n\r\n  const closeNotificationHandler = (_: Event | React.SyntheticEvent<any, Event>, reason: SnackbarCloseReason) => {\r\n    if (reason === 'timeout') {\r\n      setShowNotification(false);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <form onSubmit={submitHandler}>\r\n      <CustomisedCard>\r\n        <Title variant=\"h3\">PDF Split Tool</Title>\r\n        <CustomisedFormControl>\r\n          <TextField\r\n            label=\"Output Page Name\"\r\n            value={pageName}\r\n            onChange={setPageNameHandler}\r\n            disabled={isUploading === 'processing'}\r\n          />\r\n        </CustomisedFormControl>\r\n        <CustomisedFormControl>\r\n          <Select\r\n            title=\"Page Options\"\r\n            selectHandler={pageOptionSelectHandler}\r\n            selectedValue={pageOption}\r\n            options={pageOptions}\r\n            disabled={isUploading === 'processing'}\r\n          />\r\n        </CustomisedFormControl>\r\n        <label htmlFor=\"pdf-upload\">\r\n          <CustomisedFormControl>\r\n            <CustomisedInput\r\n              accept=\".pdf\"\r\n              type=\"file\"\r\n              id=\"pdf-upload\"\r\n              data-testid=\"pdf-upload\"\r\n              onChange={fileUploadHandler}\r\n              onClick={clearUploadedFileHandler}\r\n            />\r\n            <Button\r\n              variant=\"outlined\"\r\n              component=\"span\"\r\n              endIcon={<UploadFile />}\r\n              disabled={isUploading === 'processing'}\r\n            >\r\n              {fileName}\r\n            </Button>\r\n          </CustomisedFormControl>\r\n        </label>\r\n        <CustomisedFormControl>\r\n          <LoadingButton\r\n            loading={isUploading === 'processing'}\r\n            variant=\"contained\"\r\n            endIcon={<Send />}\r\n            disabled={!(pageName && pageOption && file)}\r\n            type=\"submit\"\r\n          >\r\n            Submit\r\n          </LoadingButton>\r\n        </CustomisedFormControl>\r\n      </CustomisedCard>\r\n      <Snackbar\r\n        anchorOrigin={{ vertical: 'top', horizontal: 'center' }}\r\n        open={showNotification}\r\n        autoHideDuration={2000}\r\n        onClose={closeNotificationHandler}\r\n      >\r\n        <Alert severity=\"success\" sx={{ width: '100%' }}>\r\n          Process Finished\r\n        </Alert>\r\n      </Snackbar>\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default PdfSplit;\r\n","import { InputLabel, Select as MuiSelect, MenuItem, SelectChangeEvent } from '@mui/material';\n\ntype selectOptions = {\n  text: string;\n  value: string;\n};\n\ninterface Props {\n  title: string;\n  selectHandler: (e: SelectChangeEvent<string>) => void;\n  selectedValue: string;\n  options: selectOptions[];\n  disabled?: boolean;\n}\n\nconst Select = ({ title, selectHandler, selectedValue, options, disabled }: Props): JSX.Element => {\n  return (\n    <>\n      <InputLabel id={`${title.toLowerCase().replaceAll(' ', '-')}-page-option-label`}>{title}</InputLabel>\n      <MuiSelect\n        labelId={`${title.toLowerCase().replaceAll(' ', '-')}-page-option-label`}\n        value={selectedValue}\n        label={title}\n        onChange={selectHandler}\n        disabled={disabled}\n      >\n        {options.map((option) => {\n          return (\n            <MenuItem key={option.value} value={option.value}>\n              {option.text}\n            </MenuItem>\n          );\n        })}\n      </MuiSelect>\n    </>\n  );\n};\n\nexport default Select;\n","import React, { useState } from 'react';\r\nimport { Button, Snackbar, TextField, Alert, SnackbarCloseReason } from '@mui/material';\r\nimport LoadingButton from '@mui/lab/LoadingButton';\r\nimport { UploadFile, Send } from '@mui/icons-material';\r\nimport FadeIn from 'react-fade-in';\r\nimport axios, { AxiosRequestConfig } from 'axios';\r\nimport { CustomisedInput, CustomisedFormControl, CustomisedCard, Title } from './PdfMerge.styled';\r\nimport DragAndDropList from '../../../common/DragAndDropList';\r\n\r\ninterface CustomisedFile {\r\n  content: File;\r\n  name: string;\r\n}\r\ntype CustomisedFileList = Array<CustomisedFile>;\r\n\r\nconst PdfMerge = (): JSX.Element => {\r\n  const [files, setFiles] = useState<CustomisedFileList>([]);\r\n  const [outputPdfName, setOutputPdfName] = useState<string>('');\r\n  const [isUploading, setIsUploading] = useState<string>('initial');\r\n  const [showNotification, setShowNotification] = useState(false);\r\n\r\n  const fileUploadHandler = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n    const files = e.currentTarget.files;\r\n    const fileList = [];\r\n    if (files && files.length) {\r\n      for (const file of files) {\r\n        fileList.push({\r\n          name: file.name,\r\n          content: file,\r\n        });\r\n      }\r\n      setFiles(fileList);\r\n    }\r\n  };\r\n\r\n  const submitHandler = async (e: React.FormEvent<HTMLFormElement>) => {\r\n    e.preventDefault();\r\n    setIsUploading('processing');\r\n    const formData = new FormData();\r\n    files.forEach((file) => formData.append('files', file.content as Blob, file.name));\r\n    formData.append('outputFileName', outputPdfName);\r\n    const headers = {\r\n      headers: { 'content-type': 'multipart/form-data', accept: 'application/octet-stream' },\r\n    } as AxiosRequestConfig;\r\n    axios\r\n      .post(`${process.env.REACT_APP_BACKEND_URL}/pdf/merge`, formData, headers)\r\n      .then((response) => {\r\n        const responseBuffer = Buffer.from(response.data, 'base64');\r\n\r\n        const url = window.URL.createObjectURL(new Blob([responseBuffer]));\r\n        const link = document.createElement('a');\r\n        link.href = url;\r\n        link.target = '_blank';\r\n        link.rel = 'noopener noreferrer';\r\n        link.setAttribute('download', `${outputPdfName}.pdf`);\r\n        document.body.appendChild(link);\r\n        link.click();\r\n\r\n        setFiles([]);\r\n        setOutputPdfName('');\r\n        setShowNotification(true);\r\n      })\r\n      .catch((err) => {\r\n        console.log(err);\r\n      })\r\n      .finally(() => {\r\n        setIsUploading('initial');\r\n      });\r\n  };\r\n\r\n  const clearUploadedFileHandler = (e: React.MouseEvent<HTMLInputElement>) => {\r\n    (e.target as HTMLInputElement).value = '';\r\n  };\r\n\r\n  const closeNotificationHandler = (_: Event | React.SyntheticEvent<any, Event>, reason: SnackbarCloseReason) => {\r\n    if (reason === 'timeout') {\r\n      setShowNotification(false);\r\n    }\r\n  };\r\n\r\n  const setOutputPdfNameHandler = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n    setOutputPdfName(e.target.value);\r\n  };\r\n\r\n  const draggingHandler = (sourceIndex: number, targetIndex: number) => {\r\n    const itemBeingDragged = files[sourceIndex];\r\n    files.splice(sourceIndex, 1);\r\n    files.splice(targetIndex, 0, itemBeingDragged);\r\n    setFiles([...files]);\r\n  };\r\n\r\n  const deleteFileHandler = (_: React.MouseEvent<HTMLButtonElement>, indexToBeDeleted: number) => {\r\n    files.splice(indexToBeDeleted, 1);\r\n    setFiles([...files]);\r\n  };\r\n\r\n  return (\r\n    <form onSubmit={submitHandler}>\r\n      <CustomisedCard>\r\n        <Title variant=\"h3\">PDF Merge Tool</Title>\r\n        <CustomisedFormControl>\r\n          <TextField\r\n            label=\"Output PDF Name\"\r\n            value={outputPdfName}\r\n            onChange={setOutputPdfNameHandler}\r\n            disabled={isUploading === 'processing'}\r\n          />\r\n        </CustomisedFormControl>\r\n        <label htmlFor=\"images-upload\">\r\n          <CustomisedFormControl>\r\n            <CustomisedInput\r\n              accept=\"image/jpeg, image/png\"\r\n              type=\"file\"\r\n              id=\"images-upload\"\r\n              data-testid=\"images-upload\"\r\n              onChange={fileUploadHandler}\r\n              onClick={clearUploadedFileHandler}\r\n              multiple\r\n            />\r\n            <Button\r\n              variant=\"outlined\"\r\n              component=\"span\"\r\n              endIcon={<UploadFile />}\r\n              disabled={isUploading === 'processing'}\r\n            >\r\n              Upload Files\r\n            </Button>\r\n          </CustomisedFormControl>\r\n        </label>\r\n\r\n        {!!files.length && (\r\n          <FadeIn>\r\n            <CustomisedFormControl>\r\n              <Alert severity=\"info\">Reorder the pages by dragging and dropping if needed</Alert>\r\n              <DragAndDropList\r\n                items={files.map((file) => file.name)}\r\n                onDragging={draggingHandler}\r\n                onDelete={deleteFileHandler}\r\n              />\r\n            </CustomisedFormControl>\r\n          </FadeIn>\r\n        )}\r\n        <CustomisedFormControl>\r\n          <LoadingButton\r\n            loading={isUploading === 'processing'}\r\n            variant=\"contained\"\r\n            endIcon={<Send />}\r\n            disabled={!files.length || !outputPdfName}\r\n            type=\"submit\"\r\n          >\r\n            Submit\r\n          </LoadingButton>\r\n        </CustomisedFormControl>\r\n      </CustomisedCard>\r\n      <Snackbar\r\n        anchorOrigin={{ vertical: 'top', horizontal: 'center' }}\r\n        open={showNotification}\r\n        autoHideDuration={2000}\r\n        onClose={closeNotificationHandler}\r\n      >\r\n        <Alert severity=\"success\" sx={{ width: '100%' }}>\r\n          Process Finished\r\n        </Alert>\r\n      </Snackbar>\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default PdfMerge;\r\n","import { List, ListItem, IconButton } from '@mui/material';\r\nimport { DragDropContext, Droppable, Draggable, DropResult, ResponderProvided } from 'react-beautiful-dnd';\r\nimport CloseIcon from '@mui/icons-material/Close';\r\nimport styled from 'styled-components';\r\n\r\ninterface Props {\r\n  items: string[];\r\n  onDragging: (sourceIndex: number, targetIndex: number) => void;\r\n  onDelete?: (event: React.MouseEvent<HTMLButtonElement>, index: number) => void;\r\n}\r\n\r\nconst CustomisedListItem = styled(ListItem)`\r\n  border: 1px solid #d9d9d9;\r\n  padding: 1em;\r\n  border-radius: 5px;\r\n  margin: 0.5em 0;\r\n  justify-content: space-between;\r\n  align-content: center;\r\n  flex-direction: row;\r\n`;\r\n\r\nconst CustomisedCloseIcon = styled(CloseIcon)`\r\n  cursor: pointer;\r\n`;\r\n\r\nconst DragAndDropList = ({ items, onDragging, onDelete }: Props): JSX.Element => {\r\n  const draggingHandler = (result: DropResult, _: ResponderProvided) => {\r\n    const sourceIndex = result.source?.index;\r\n    const targetIndex = result.destination?.index;\r\n    if (sourceIndex !== undefined && targetIndex !== undefined && sourceIndex !== targetIndex) {\r\n      onDragging(sourceIndex, targetIndex);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <DragDropContext onDragEnd={draggingHandler}>\r\n      <Droppable droppableId=\"dnd-items\">\r\n        {(droppableProvided) => (\r\n          <List ref={droppableProvided.innerRef} {...droppableProvided.droppableProps} data-testid=\"drag-and-drop-list\">\r\n            {items.map((item, index) => (\r\n              <Draggable draggableId={`files-${index}`} key={index} index={index}>\r\n                {(draggableProvided) => (\r\n                  <CustomisedListItem\r\n                    ref={draggableProvided.innerRef}\r\n                    {...draggableProvided.draggableProps}\r\n                    {...draggableProvided.dragHandleProps}\r\n                  >\r\n                    <span data-testid=\"item\">{item}</span>\r\n                    {onDelete && (\r\n                      <IconButton\r\n                        aria-label=\"delete item\"\r\n                        data-testid=\"delete-item\"\r\n                        onClick={(e) => onDelete(e, index)}\r\n                      >\r\n                        <CustomisedCloseIcon />\r\n                      </IconButton>\r\n                    )}\r\n                  </CustomisedListItem>\r\n                )}\r\n              </Draggable>\r\n            ))}\r\n            {droppableProvided.placeholder}\r\n          </List>\r\n        )}\r\n      </Droppable>\r\n    </DragDropContext>\r\n  );\r\n};\r\n\r\nexport default DragAndDropList;\r\n","const breakpoints = {\n  xs: '0px',\n  sm: '600px',\n  md: '900px',\n  lg: '1200px',\n  xl: '1536px',\n};\n\nexport default breakpoints;\n","import { Card } from '@mui/material';\nimport styled from 'styled-components';\nimport breakpoints from '../breakpoints';\n\nexport const CustomisedCard = styled(Card)`\n  text-align: center;\n  margin: 5% auto;\n  padding: 2em;\n  width: 40em;\n  @media (max-width: ${breakpoints.sm}) {\n    width: fit-content;\n  }\n`;\n","import { List, ListItem, Typography, Button } from '@mui/material';\n\nimport { CustomisedCard } from './ButtonMenu.styled';\n\ntype OptionType = {\n  name: string;\n  icon: React.ReactNode;\n  clickParameter: string;\n};\n\ninterface Props {\n  title?: string;\n  options: OptionType[];\n  clickHandler: (clickParameter: string) => void;\n}\n\nconst ButtonMenu = ({ title, options, clickHandler }: Props): JSX.Element => {\n  return (\n    <CustomisedCard>\n      {title && (\n        <Typography variant=\"h3\" component=\"h1\">\n          {title}\n        </Typography>\n      )}\n      <List>\n        {options.map((option) => (\n          <ListItem key={option.name} sx={{ display: 'flex' }}>\n            <Button\n              startIcon={option.icon}\n              variant=\"contained\"\n              sx={{ margin: 'auto 0', width: '100%' }}\n              onClick={() => clickHandler(option.clickParameter)}\n            >\n              {option.name}\n            </Button>\n          </ListItem>\n        ))}\n      </List>\n    </CustomisedCard>\n  );\n};\n\nexport default ButtonMenu;\n","import PictureAsPdfIcon from '@mui/icons-material/PictureAsPdf';\nimport { useNavigate } from 'react-router-dom';\nimport ButtonMenu from './common/ButtonMenu';\n\nconst App = (): JSX.Element => {\n  const navigate = useNavigate();\n  const navigateToLink = (link: string) => {\n    navigate(link);\n  };\n\n  const tools = [\n    {\n      name: 'PDF Tool',\n      icon: <PictureAsPdfIcon />,\n      clickParameter: '/pdf-tool',\n    },\n  ];\n\n  return <ButtonMenu title=\"Features\" options={tools} clickHandler={navigateToLink} />;\n};\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler): void => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { useMemo, useState, createContext } from 'react';\nimport { ThemeProvider, createTheme } from '@mui/material/styles';\n\ninterface themeContextType {\n  switchTheme: () => void;\n}\n\nexport const ThemeContext = createContext<themeContextType>({\n  /* istanbul ignore next */\n  switchTheme: () => {\n    return;\n  },\n});\n\ninterface Props {\n  children: React.ReactNode;\n}\n\nexport const ThemeContextProvider = ({ children }: Props): JSX.Element => {\n  const [mode, setMode] = useState<'light' | 'dark'>('light');\n\n  const switchMode = () => {\n    setMode((prevMode) => {\n      return prevMode === 'dark' ? 'light' : 'dark';\n    });\n  };\n\n  const theme = useMemo(\n    () =>\n      createTheme({\n        palette: {\n          mode,\n        },\n      }),\n    [mode],\n  );\n\n  return (\n    <ThemeContext.Provider value={{ switchTheme: switchMode }}>\n      <ThemeProvider theme={theme}>{children}</ThemeProvider>\n    </ThemeContext.Provider>\n  );\n};\n","import { useContext } from 'react';\nimport { Box, AppBar, Toolbar, Typography, IconButton } from '@mui/material';\nimport { Menu, DarkMode, LightMode } from '@mui/icons-material';\nimport { ThemeContext } from '../../context/theme-context';\nimport { useTheme } from '@mui/material/styles';\n\nconst Header = (): JSX.Element => {\n  const themeContext = useContext(ThemeContext);\n  const theme = useTheme();\n\n  return (\n    <Box sx={{ flexGrow: 1 }}>\n      <AppBar position=\"static\">\n        <Toolbar>\n          <IconButton size=\"large\" edge=\"start\" color=\"inherit\" aria-label=\"menu\" sx={{ mr: 2 }}>\n            <Menu />\n          </IconButton>\n          <Typography variant=\"h6\" component=\"div\" sx={{ flexGrow: 1 }}>\n            Office Utility Tools\n          </Typography>\n          {theme.palette.mode} mode\n          <IconButton onClick={themeContext.switchTheme} data-testid=\"color-mode\">\n            {theme.palette.mode === 'dark' ? (\n              <LightMode aria-label=\"light mode\" />\n            ) : (\n              <DarkMode sx={{ color: 'white' }} aria-label=\"dark mode\" />\n            )}\n          </IconButton>\n        </Toolbar>\n      </AppBar>\n    </Box>\n  );\n};\n\nexport default Header;\n","import ContentCutIcon from '@mui/icons-material/ContentCut';\r\nimport MergeIcon from '@mui/icons-material/Merge';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport ButtonMenu from './../../common/ButtonMenu';\r\n\r\nconst PdfInterface = (): JSX.Element => {\r\n  const navigate = useNavigate();\r\n  const navigateToLink = (link: string) => {\r\n    navigate(link);\r\n  };\r\n\r\n  const functionalities = [\r\n    {\r\n      name: 'PDF to image',\r\n      icon: <ContentCutIcon />,\r\n      clickParameter: '/pdf-tool/split',\r\n      clickHandler: navigateToLink,\r\n    },\r\n    {\r\n      name: 'Image to PDF',\r\n      icon: <MergeIcon />,\r\n      clickParameter: '/pdf-tool/merge',\r\n      clickHandler: navigateToLink,\r\n    },\r\n  ];\r\n\r\n  return <ButtonMenu title=\"PDF Utility Tool\" options={functionalities} clickHandler={navigateToLink} />;\r\n};\r\n\r\nexport default PdfInterface;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { HashRouter as Router, Route, Routes } from 'react-router-dom';\r\nimport { Box } from '@mui/material';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport { ThemeContextProvider } from './context/theme-context';\r\nimport Header from './components/layout/Header';\r\nimport PdfInterface from './components/pdfTool/PdfInterface';\r\nimport PdfSplit from './components/pdfTool/pdfSplit/PdfSplit';\r\nimport PdfMerge from './components/pdfTool/pdfMerge/PdfMerge';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Router>\r\n      <ThemeContextProvider>\r\n        <Box sx={{ width: '100%', height: '100%', bgcolor: 'background.default', color: 'text.primary' }}>\r\n          <Header />\r\n          <Routes>\r\n            <Route path=\"/\" element={<App />} />\r\n            <Route path=\"/pdf-tool\" element={<PdfInterface />} />\r\n            <Route path=\"/pdf-tool/split\" element={<PdfSplit />} />\r\n            <Route path=\"/pdf-tool/merge\" element={<PdfMerge />} />\r\n          </Routes>\r\n        </Box>\r\n      </ThemeContextProvider>\r\n    </Router>\r\n  </React.StrictMode>,\r\n  document.getElementById('root'),\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n","import { Typography, FormControl, Card } from '@mui/material';\nimport styled from 'styled-components';\n\nexport const CustomisedInput = styled.input`\n  display: none;\n`;\n\nexport const CustomisedFormControl = styled(FormControl)`\n  padding: 0.3em 0 !important;\n  margin: 0.3em 0 !important;\n  width: 100%;\n`;\n\nexport const CustomisedCard = styled(Card)`\n  margin: 5% auto;\n  padding: 2em;\n  width: 50%;\n`;\n\nexport const Title = styled(Typography)`\n  margin-bottom: 3% !important;\n  text-align: center;\n`;\n","import { Typography, ListItem, FormControl, Card } from '@mui/material';\r\nimport styled from 'styled-components';\r\n\r\nexport const CustomisedInput = styled.input`\r\n  display: none;\r\n`;\r\n\r\nexport const CustomisedFormControl = styled(FormControl)`\r\n  padding: 0.3em 0 !important;\r\n  margin: 0.3em 0 !important;\r\n  width: 100%;\r\n`;\r\n\r\nexport const CustomisedCard = styled(Card)`\r\n  margin: 5% auto;\r\n  padding: 2em;\r\n  width: 50%;\r\n`;\r\n\r\nexport const Title = styled(Typography)`\r\n  margin-bottom: 3% !important;\r\n  text-align: center;\r\n`;\r\n\r\nexport const CustomisedListItem = styled(ListItem)`\r\n  border: 1px solid #d9d9d9;\r\n  padding: 1em;\r\n  border-radius: 5px;\r\n`;\r\n"],"sourceRoot":""}