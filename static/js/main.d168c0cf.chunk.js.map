{"version":3,"sources":["breakpoints.ts","common/ButtonMenu.styled.tsx","common/ButtonMenu.tsx","App.tsx","reportWebVitals.ts","context/theme-context.tsx","components/layout/Header.tsx","components/pdfTool/PdfInterface.tsx","components/pdfTool/pdfSplit/PdfSplit.styled.ts","common/Select.tsx","components/pdfTool/pdfSplit/PdfSplit.tsx","index.tsx"],"names":["breakpoints","xs","sm","md","lg","xl","CustomisedCard","styled","Card","ButtonMenu","title","options","clickHandler","Typography","variant","component","List","map","option","ListItem","sx","display","Button","startIcon","icon","margin","width","onClick","clickParameter","name","App","navigate","useNavigate","tools","link","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ThemeContext","createContext","switchTheme","ThemeContextProvider","children","useState","mode","setMode","theme","useMemo","createTheme","palette","Provider","value","prevMode","ThemeProvider","Header","themeContext","useContext","useTheme","Box","flexGrow","AppBar","position","Toolbar","IconButton","size","edge","color","mr","Menu","LightMode","DarkMode","PdfInterface","navigateToLink","functionalities","CustomisedInput","input","CustomisedFormControl","FormControl","Title","Select","selectHandler","selectedValue","disabled","InputLabel","id","toLowerCase","replaceAll","labelId","label","onChange","MenuItem","text","pageOptions","PdfSplit","pageName","setPageName","pageOption","setPageOption","file","setFile","fileName","setFileName","isUploading","setIsUploading","showNotification","setShowNotification","submitHandler","e","a","preventDefault","formData","FormData","append","JSON","stringify","split","headers","responseType","axios","post","process","response","download","data","replace","catch","err","console","log","finally","onSubmit","TextField","target","htmlFor","accept","type","files","currentTarget","length","endIcon","UploadFile","LoadingButton","loading","Send","Snackbar","anchorOrigin","vertical","horizontal","open","autoHideDuration","onClose","_","reason","Alert","severity","ReactDOM","render","StrictMode","height","bgcolor","path","element","document","getElementById"],"mappings":"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","file":"static/js/main.d168c0cf.chunk.js","sourcesContent":["const breakpoints = {\n  xs: '0px',\n  sm: '600px',\n  md: '900px',\n  lg: '1200px',\n  xl: '1536px',\n};\n\nexport default breakpoints;\n","import { Card } from '@mui/material';\nimport styled from 'styled-components';\nimport breakpoints from '../breakpoints';\n\nexport const CustomisedCard = styled(Card)`\n  text-align: center;\n  margin: 5% auto;\n  padding: 2em;\n  width: 40em;\n  @media (max-width: ${breakpoints.sm}) {\n    width: fit-content;\n  }\n`;\n","import { List, ListItem, Typography, Button } from '@mui/material';\n\nimport { CustomisedCard } from './ButtonMenu.styled';\n\ntype OptionType = {\n  name: string;\n  icon: React.ReactNode;\n  clickParameter: string;\n};\n\ninterface Props {\n  title?: string;\n  options: OptionType[];\n  clickHandler: (clickParameter: string) => void;\n}\n\nconst ButtonMenu = ({ title, options, clickHandler }: Props): JSX.Element => {\n  return (\n    <CustomisedCard>\n      {title && (\n        <Typography variant=\"h3\" component=\"h1\">\n          {title}\n        </Typography>\n      )}\n      <List>\n        {options.map((option) => (\n          <ListItem key={option.name} sx={{ display: 'flex' }}>\n            <Button\n              startIcon={option.icon}\n              variant=\"contained\"\n              sx={{ margin: 'auto 0', width: '100%' }}\n              onClick={() => clickHandler(option.clickParameter)}\n            >\n              {option.name}\n            </Button>\n          </ListItem>\n        ))}\n      </List>\n    </CustomisedCard>\n  );\n};\n\nexport default ButtonMenu;\n","import PictureAsPdfIcon from '@mui/icons-material/PictureAsPdf';\nimport { useNavigate } from 'react-router-dom';\nimport ButtonMenu from './common/ButtonMenu';\n\nconst App = (): JSX.Element => {\n  const navigate = useNavigate();\n  const navigateToLink = (link: string) => {\n    navigate(link);\n  };\n\n  const tools = [\n    {\n      name: 'PDF Tool',\n      icon: <PictureAsPdfIcon />,\n      clickParameter: '/pdf-tool',\n    },\n  ];\n\n  return <ButtonMenu title=\"Features\" options={tools} clickHandler={navigateToLink} />;\n};\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler): void => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { useMemo, useState, createContext } from 'react';\nimport { ThemeProvider, createTheme } from '@mui/material/styles';\n\ninterface themeContextType {\n  switchTheme: () => void;\n}\n\nexport const ThemeContext = createContext<themeContextType>({\n  /* istanbul ignore next */\n  switchTheme: () => {\n    return;\n  },\n});\n\ninterface Props {\n  children: React.ReactNode;\n}\n\nexport const ThemeContextProvider = ({ children }: Props): JSX.Element => {\n  const [mode, setMode] = useState<'light' | 'dark'>('light');\n\n  const switchMode = () => {\n    setMode((prevMode) => {\n      return prevMode === 'dark' ? 'light' : 'dark';\n    });\n  };\n\n  const theme = useMemo(\n    () =>\n      createTheme({\n        palette: {\n          mode,\n        },\n      }),\n    [mode],\n  );\n\n  return (\n    <ThemeContext.Provider value={{ switchTheme: switchMode }}>\n      <ThemeProvider theme={theme}>{children}</ThemeProvider>\n    </ThemeContext.Provider>\n  );\n};\n","import { useContext } from 'react';\nimport { Box, AppBar, Toolbar, Typography, IconButton } from '@mui/material';\nimport { Menu, DarkMode, LightMode } from '@mui/icons-material';\nimport { ThemeContext } from '../../context/theme-context';\nimport { useTheme } from '@mui/material/styles';\n\nconst Header = (): JSX.Element => {\n  const themeContext = useContext(ThemeContext);\n  const theme = useTheme();\n\n  return (\n    <Box sx={{ flexGrow: 1 }}>\n      <AppBar position=\"static\">\n        <Toolbar>\n          <IconButton size=\"large\" edge=\"start\" color=\"inherit\" aria-label=\"menu\" sx={{ mr: 2 }}>\n            <Menu />\n          </IconButton>\n          <Typography variant=\"h6\" component=\"div\" sx={{ flexGrow: 1 }}>\n            Office Utility Tools\n          </Typography>\n          {theme.palette.mode} mode\n          <IconButton onClick={themeContext.switchTheme} data-testid=\"color-mode\">\n            {theme.palette.mode === 'dark' ? (\n              <LightMode aria-label=\"light mode\" />\n            ) : (\n              <DarkMode sx={{ color: 'white' }} aria-label=\"dark mode\" />\n            )}\n          </IconButton>\n        </Toolbar>\n      </AppBar>\n    </Box>\n  );\n};\n\nexport default Header;\n","import ContentCutIcon from '@mui/icons-material/ContentCut';\nimport { useNavigate } from 'react-router-dom';\nimport ButtonMenu from './../../common/ButtonMenu';\n\nconst PdfInterface = (): JSX.Element => {\n  const navigate = useNavigate();\n  const navigateToLink = (link: string) => {\n    navigate(link);\n  };\n\n  const functionalities = [\n    {\n      name: 'PDF Split',\n      icon: <ContentCutIcon />,\n      clickParameter: '/pdf-tool/split',\n      clickHandler: navigateToLink,\n    },\n  ];\n\n  return <ButtonMenu title=\"PDF Utility Tool\" options={functionalities} clickHandler={navigateToLink} />;\n};\n\nexport default PdfInterface;\n","import { Typography, FormControl, Card } from '@mui/material';\nimport styled from 'styled-components';\n\nexport const CustomisedInput = styled.input`\n  display: none;\n`;\n\nexport const CustomisedFormControl = styled(FormControl)`\n  padding: 0.3em 0 !important;\n  margin: 0.3em 0 !important;\n  width: 100%;\n`;\n\nexport const CustomisedCard = styled(Card)`\n  margin: 5% auto;\n  padding: 2em;\n  width: 50%;\n`;\n\nexport const Title = styled(Typography)`\n  margin-bottom: 3% !important;\n  text-align: center;\n`;\n","import { InputLabel, Select as MuiSelect, MenuItem, SelectChangeEvent } from '@mui/material';\n\ntype selectOptions = {\n  text: string;\n  value: string;\n};\n\ninterface Props {\n  title: string;\n  selectHandler: (e: SelectChangeEvent<string>) => void;\n  selectedValue: string;\n  options: selectOptions[];\n  disabled?: boolean;\n}\n\nconst Select = ({ title, selectHandler, selectedValue, options, disabled }: Props): JSX.Element => {\n  return (\n    <>\n      <InputLabel id={`${title.toLowerCase().replaceAll(' ', '-')}-page-option-label`}>{title}</InputLabel>\n      <MuiSelect\n        labelId={`${title.toLowerCase().replaceAll(' ', '-')}-page-option-label`}\n        value={selectedValue}\n        label={title}\n        onChange={selectHandler}\n        disabled={disabled}\n      >\n        {options.map((option) => {\n          return (\n            <MenuItem key={option.value} value={option.value}>\n              {option.text}\n            </MenuItem>\n          );\n        })}\n      </MuiSelect>\n    </>\n  );\n};\n\nexport default Select;\n","import React, { useState } from 'react';\nimport { Button, TextField, SelectChangeEvent, Snackbar, Alert, SnackbarCloseReason } from '@mui/material';\nimport LoadingButton from '@mui/lab/LoadingButton';\nimport { UploadFile, Send } from '@mui/icons-material';\nimport axios, { AxiosRequestConfig } from 'axios';\nimport download from 'downloadjs';\nimport { CustomisedInput, CustomisedFormControl, CustomisedCard, Title } from './PdfSplit.styled';\nimport Select from '../../../common/Select';\n\nconst pageOptions = [\n  {\n    text: 'No Page Split',\n    value: 'no-split',\n  },\n  {\n    text: 'Page Split (Horizontal)',\n    value: 'horizontal',\n  },\n  {\n    text: 'Page Split (Vertical)',\n    value: 'vertical',\n  },\n];\n\nconst PdfSplit = (): JSX.Element => {\n  const [pageName, setPageName] = useState('Page');\n  const [pageOption, setPageOption] = useState('no-split');\n  const [file, setFile] = useState<File | null>(null);\n  const [fileName, setFileName] = useState('Upload File');\n  const [isUploading, setIsUploading] = useState('initial');\n  const [showNotification, setShowNotification] = useState(false);\n\n  const setPageNameHandler = (e: React.ChangeEvent<HTMLInputElement>) => {\n    setPageName(e.target.value);\n  };\n\n  const pageOptionSelectHandler = (e: SelectChangeEvent<string>): void => {\n    setPageOption(e.target.value);\n  };\n\n  const fileUploadHandler = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const files = e.currentTarget.files;\n    if (files && files.length) {\n      setFileName(files[0].name);\n      setFile(files[0]);\n    }\n  };\n\n  const submitHandler = async (e: React.FormEvent<HTMLFormElement>) => {\n    e.preventDefault();\n    setIsUploading('processing');\n    const formData = new FormData();\n    formData.append('file', file as Blob, fileName);\n    formData.append('pageName', pageName);\n    formData.append('pageOptions', JSON.stringify({ split: pageOption }));\n    const headers = {\n      headers: { 'content-type': 'multipart/form-data' },\n      responseType: 'arraybuffer',\n    } as AxiosRequestConfig;\n    axios\n      .post(`${process.env.REACT_APP_BACKEND_URL}/pdf/split`, formData, headers)\n      .then((response) => {\n        download(response.data, fileName.replace('.pdf', '.zip'));\n        setFile(null);\n        setFileName('Upload File');\n        setShowNotification(true);\n      })\n      .catch((err) => {\n        console.log(err);\n      })\n      .finally(() => {\n        setIsUploading('initial');\n      });\n  };\n\n  const clearUploadedFileHandler = (e: React.MouseEvent<HTMLInputElement>) => {\n    (e.target as HTMLInputElement).value = '';\n  };\n\n  const closeNotificationHandler = (_: Event | React.SyntheticEvent<any, Event>, reason: SnackbarCloseReason) => {\n    if (reason === 'timeout') {\n      setShowNotification(false);\n    }\n  };\n\n  return (\n    <form onSubmit={submitHandler}>\n      <CustomisedCard>\n        <Title variant=\"h3\">PDF Split Tool</Title>\n        <CustomisedFormControl>\n          <TextField\n            label=\"Output Page Name\"\n            value={pageName}\n            onChange={setPageNameHandler}\n            disabled={isUploading === 'processing'}\n          />\n        </CustomisedFormControl>\n        <CustomisedFormControl>\n          <Select\n            title=\"Page Options\"\n            selectHandler={pageOptionSelectHandler}\n            selectedValue={pageOption}\n            options={pageOptions}\n            disabled={isUploading === 'processing'}\n          />\n        </CustomisedFormControl>\n        <label htmlFor=\"pdf-upload\">\n          <CustomisedFormControl>\n            <CustomisedInput\n              accept=\".pdf\"\n              type=\"file\"\n              id=\"pdf-upload\"\n              data-testid=\"pdf-upload\"\n              onChange={fileUploadHandler}\n              onClick={clearUploadedFileHandler}\n            />\n            <Button\n              variant=\"outlined\"\n              component=\"span\"\n              endIcon={<UploadFile />}\n              disabled={isUploading === 'processing'}\n            >\n              {fileName}\n            </Button>\n          </CustomisedFormControl>\n        </label>\n        <CustomisedFormControl>\n          <LoadingButton\n            loading={isUploading === 'processing'}\n            variant=\"contained\"\n            endIcon={<Send />}\n            disabled={!(pageName && pageOption && file)}\n            type=\"submit\"\n          >\n            Submit\n          </LoadingButton>\n        </CustomisedFormControl>\n      </CustomisedCard>\n      <Snackbar\n        anchorOrigin={{ vertical: 'top', horizontal: 'center' }}\n        open={showNotification}\n        autoHideDuration={3000}\n        onClose={closeNotificationHandler}\n      >\n        <Alert severity=\"success\" sx={{ width: '100%' }}>\n          Process Finished\n        </Alert>\n      </Snackbar>\n    </form>\n  );\n};\n\nexport default PdfSplit;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { HashRouter as Router, Route, Routes } from 'react-router-dom';\nimport { Box } from '@mui/material';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { ThemeContextProvider } from './context/theme-context';\nimport Header from './components/layout/Header';\nimport PdfInterface from './components/pdfTool/PdfInterface';\nimport PdfSplit from './components/pdfTool/pdfSplit/PdfSplit';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Router>\n      <ThemeContextProvider>\n        <Box sx={{ width: '100%', height: '100%', bgcolor: 'background.default', color: 'text.primary' }}>\n          <Header />\n          <Routes>\n            <Route path=\"/\" element={<App />} />\n            <Route path=\"/pdf-tool\" element={<PdfInterface />} />\n            <Route path=\"/pdf-tool/split\" element={<PdfSplit />} />\n          </Routes>\n        </Box>\n      </ThemeContextProvider>\n    </Router>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}